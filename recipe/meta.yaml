{% set version = "5.0.3" %}
{% set major = version.rpartition('.')[0] %}
{% set cuda_major = (cuda_compiler_version|default("11.8")).rpartition('.')[0] %}
{% set build = 7 %}

# give conda package a higher build number
{% if mpi_type == 'conda' %}
{% set build = build + 100 %}
{% endif %}

package:
  # must not match any outputs for requirements to be handled correctly
  name: openmpi-mpi
  version: {{ version }}

source:
  fn: openmpi-{{ version }}.tar.bz2
  url: https://www.open-mpi.org/software/ompi/v{{ major }}/downloads/openmpi-{{ version }}.tar.bz2
  sha256: 990582f206b3ab32e938aa31bbf07c639368e4405dca196fabe7f0f76eeda90b

build:
  number: {{ build }}
  skip: true  # [win]
  skip: true  # [linux and cuda_compiler_version != "11.8"]

outputs:
  - name: openmpi
    {% if mpi_type == 'conda' %}
    script: build-mpi.sh
    {% endif %}
    build:
      {% if mpi_type == 'conda' %}
      run_exports:
        - {{ pin_subpackage('openmpi', min_pin='x.x.x', max_pin='x') }}
      {% else %}
      string: {{ mpi_type }}_h{{ PKG_HASH }}_{{ build }}
      track_features:
        - openmpi_{{ mpi_type }}
      {% endif %}
      ignore_run_exports:
        - ucx  # [linux]
      ignore_run_exports_from:
        - {{ compiler('cuda') }}   # [cuda_compiler != "None"]
    requirements:
      build:
        - {{ compiler('c') }}
        - {{ compiler('cxx') }}
        - {{ compiler('cuda') }}     # [cuda_compiler != "None"]
        - {{ compiler('fortran') }}
        - {{ stdlib('c') }}
        #- autoconf  # [unix]
        #- automake  # [unix]
        - libtool   # [unix]
        - make  # [unix]
      host:
        #- openpmix
        #- prrte
        - libhwloc
        - libevent
        - libnl  # [linux]
        - zlib
        - ucx  # [linux]
        - cuda-version {{ cuda_compiler_version }}  # [cuda_compiler != "None"]
      run:
        - mpi 1.0 openmpi
        #- openpmix
        #- prrte
      run_constrained:
        - {{ pin_compatible("ucx", max_pin="x.x") }}  # [linux]
        # Open MPI only uses CUDA Driver APIs, set the minimal driver version
        - __cuda  >= {{ cuda_major ~ ".0" }}  # [cuda_compiler != "None"]
        # Ensure a consistent CUDA environment
        - cuda-version  >= {{ cuda_major ~ ".0" }}  # [cuda_compiler != "None"]
    test:
      {% if mpi_type == 'conda' %}
      script: run_test.sh
      files:
        - tests/helloworld.sh
      {% else %}
      commands:
        - echo "It works!"
      {% endif %}

  {% if mpi_type == 'conda' %}
  - name: openmpi-mpicc
    build:
      script:
        - echo 'ok'  # [not osx]
        # make CONDA_BUILD_SYSROOT a 'used variable'
        # so that conda-build knows to pass it to the test env
        - echo "{{ CONDA_BUILD_SYSROOT }}"  # [osx]
    requirements:
      build:
        - {{ stdlib('c') }}
      run:
        - {{ pin_subpackage('openmpi', exact=True) }}
        # host C compilers work fine (better) on mac
        - {{ compiler('c') }}
    test:
      script: run_test.sh
      files:
        - tests/helloworld.c

  - name: openmpi-mpicxx
    build:
      script:
        - echo 'ok'  # [not osx]
        # make CONDA_BUILD_SYSROOT a 'used variable'
        # so that conda-build knows to pass it to the test env
        - echo "{{ CONDA_BUILD_SYSROOT }}"  # [osx]
    requirements:
      build:
        - {{ stdlib('c') }}
      run:
        - {{ pin_subpackage('openmpi', exact=True) }}
        # host C compilers work fine (better) on mac
        - {{ compiler('cxx') }}
    test:
      script: run_test.sh
      files:
        - tests/helloworld.cxx

  - name: openmpi-mpifort
    build:
      script:
        - echo 'ok'  # [not osx]
        # make CONDA_BUILD_SYSROOT a 'used variable'
        # so that conda-build knows to pass it to the test env
        - echo "{{ CONDA_BUILD_SYSROOT }}"  # [osx]
    requirements:
      build:
        - {{ stdlib('c') }}
      run:
        - {{ pin_subpackage('openmpi', exact=True) }}
        - {{ compiler('fortran') }}
    test:
      script: run_test.sh
      files:
        - tests/helloworld.f
        - tests/helloworld.f90
  {% endif %}

about:
  home: https://www.open-mpi.org/
  license: BSD-3-Clause
  license_family: BSD
  license_file: LICENSE
  summary: An open source Message Passing Interface implementation.
  description: |
    The Open MPI Project is an open source Message Passing Interface
    implementation that is developed and maintained by a consortium of academic,
    research, and industry partners.
  doc_url: https://www.open-mpi.org/doc/
  dev_url: https://github.com/open-mpi/ompi

extra:
  recipe-maintainers:
    - astrofrog
    - bekozi
    - dalcinl
    - leofang
    - minrk
    - msarahan
    - ocefpaf
    - beckermr

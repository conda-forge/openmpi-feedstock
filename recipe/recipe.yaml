schema_version: 1

context:
  version: 5.0.8
  build: 105
  mpi_type: ${{ mpi_type | default('conda') }}
  major_minor: ${{ (version | split('.'))[:2] | join('.') }}
  cuda_compiler_version: ${{ cuda_compiler_version | default('None') }}
  with_cuda: ${{ 'true' if cuda_compiler_version != 'None' else '' }}
  cuda_major: >-
    ${{
      cuda_compiler_version | split('.') | first
      if with_cuda
      else "0"
    }}
  string_prefix: ${{ 'external_' if mpi_type == 'external' else '' }}

recipe:
  name: openmpi
  version: ${{ version }}

source:
  url: https://www.open-mpi.org/software/ompi/v${{ major_minor }}/downloads/openmpi-${{ version }}.tar.bz2
  sha256: 53131e1a57e7270f645707f8b0b65ba56048f5b5ac3f68faabed3eb0d710e449
  
build:
  number: ${{ build }}
  skip: win or (linux and cuda_compiler_version != cuda_compiler_version_min)
  variant:
    use_keys: 
      - if: linux
        then:
          - cuda_compiler_version_min

outputs:
  - package:
      name: openmpi
    build:
      script: 
        file: ${{ 'build-mpi' if mpi_type == 'conda' else 'null' }}
      variant:
        # deprioritize external
        down_prioritize_variant: ${{ 1 if mpi_type == 'external' else 0 }}
      string: ${{ string_prefix }}h${{ hash }}_${{ build }}
      
    requirements:
      build:
        - ${{ compiler('c') }}
        - ${{ compiler('cxx') }}
        - if: with_cuda
          then:
            - ${{ compiler('cuda') }}
        - ${{ compiler('fortran') }}
        - ${{ stdlib('c') }}
        - pkg-config
        - make
      host:
        - libevent
        - libfabric-devel ${{ libfabric }}.*
        - libhwloc
        - libpmix-devel
        - zlib
        - if: linux
          then:
            - libnl
        - if: linux and not ppc64le
          then:
            - ucc
            - ucx
        - if: with_cuda
          then:
            - cuda-version ${{ cuda_compiler_version }}.*
      run:
        - mpi 1.0.* openmpi
      run_constraints:
        # Open MPI only uses CUDA Driver APIs, set the minimal driver version
        - if: with_cuda
          then:
            - __cuda  >= ${{ cuda_major ~ ".0" }}
            # Ensure a consistent CUDA environment
            - cuda-version  >= ${{ cuda_major ~ ".0" }}
        # conflict with prrte
        # openmpi (starting with 6)
        # bundles its own fork of prrte
        - libprrte ==0.0.0
    tests:
      - package_contents:
          files:
            not_exists: 
              - share/doc/openmpi
              - share/man/man3/MPI_Init.3
      - script:
        - if: mpi_type == 'conda'
          then:
            - bash run_test.sh
          else:
            - echo 'ok'
        requirements:
          run:
            - if: linux
              then:
                - patchelf
        files:
          recipe:
            - run_test.sh
            - tests/helloworld.sh
  - package:
      name: openmpi-mpicc
    build:
      skip: mpi_type != 'conda'
      script:
        - echo 'ok'
    requirements:
      build:
        - ${{ stdlib('c') }}
      run:
        - ${{ pin_subpackage('openmpi', exact=True) }}
        - ${{ compiler('c') | replace(' =', '>=') }}
    tests:
      - script:
          file: run_test
        files:
          recipe:
            - tests/helloworld.c

  - package:
      name: openmpi-mpicxx
    build:
      skip: mpi_type != 'conda'
      script:
        - echo 'ok'
    requirements:
      build:
        - ${{ stdlib('c') }}
      run:
        - ${{ pin_subpackage('openmpi', exact=True) }}
        # host C compilers work fine (better) on mac
        - ${{ compiler('cxx') | replace(' =', '>=') }}
    tests:
      - script:
          file: run_test
        files:
          recipe:
            - tests/helloworld.cxx

  - package:
      name: openmpi-mpifort
    build:
      skip: mpi_type != 'conda'
      script:
        - echo 'ok'
    requirements:
      build:
        - ${{ stdlib('c') }}
      run:
        - ${{ pin_subpackage('openmpi', exact=True) }}
        - ${{ compiler('fortran') | replace(' =', '>=') }}
    tests:
      - script:
          file: run_test
        files:
          recipe:
            - tests/helloworld.f
            - tests/helloworld.f90

about:
  homepage: https://www.open-mpi.org/
  license: BSD-3-Clause
  license_family: BSD
  license_file: LICENSE
  summary: An open source Message Passing Interface implementation.
  description: |
    The Open MPI Project is an open source Message Passing Interface
    implementation that is developed and maintained by a consortium of academic,
    research, and industry partners.
  documentation: https://www.open-mpi.org/doc/
  repository: https://github.com/open-mpi/ompi

extra:
  recipe-maintainers:
    - astrofrog
    - bekozi
    - dalcinl
    - leofang
    - minrk
    - msarahan
    - ocefpaf
    - beckermr
    - j34ni
